/** @odoo-module **/

import { Component, useState, onWillStart } from "@odoo/owl";
import { registry } from "@web/core/registry";
import { rpc } from "@web/core/network/rpc";

export class TestModelTemplate extends Component {
    setup() {
        this.state = useState({
<<<<<<< HEAD
            items: [],
            newName: "",
            newTitle: "",
            selectedIds: new Set(),
        });

        onWillStart(async () => {
            this.state.items = await rpc("/test/list", {});
        });
    }

    async addTest() {
=======
            /* m·∫•y c√°i tr∆∞·ªùng n√†y kh√¥ng c·∫ßn hi·ªÉu ƒë√¢u nh·ª©c ƒë·∫ßu l·∫Øm 
            c·ª© bi·∫øt l√† model c√≥ tr∆∞·ªùng n√†o th√¨ ƒë·∫∑t v√†o th√¥i
            c√≤n m·∫•y c√°i items hay selectedIDs th√¨ gi·ªØ nguy√™n nh√©
            ch·ªâ c·∫ßn ƒë·ªÉ √Ω m·∫•y c√°i tr∆∞·ªùng new v√† edit th√¥i
            */

            // Tr∆∞·ªùng d√πng khi th√™m m·ªõi
            newName: "",
            newTitle: "",
            newImage: "",
            isCreateModal: false, // d√πng ƒë·ªÉ b·∫≠t t·∫Øt form t·∫°o

            // D·ªØ li·ªáu danh s√°ch
            items: [],
            selectedIds: new Set(),

            // Tr∆∞·ªùng cho xem chi ti·∫øt
            detailItem: {},
            showModal: false, // d√πng ƒë·ªÉ b·∫≠t t·∫Øt form chi ti·∫øt
            
            // Tr∆∞·ªùng d√πng khi s·ª≠a
            editName: "",
            editTitle: "",
            editImage: "",
            editId: null,
            isEditModal: false, // D√πng ƒë·ªÉ b·∫≠t t·∫Øt form ch·ªânh s·ª≠a
            
            // L·ªçc
            filterField: "name",
            filterValue: "",

            // Ph√¢n trang
            page: 1,
            pageSize: 8,
            total: 0,
        });

        // Khi component b·∫Øt ƒë·∫ßu
        onWillStart(async () => {
            await this.loadItems();
        });
    }

     // üëâ T·∫£i danh s√°ch t·ª´ server v·ªõi filter v√† ph√¢n trang
    async loadItems() {
        const params = {
            page: this.state.page,
            page_size: this.state.pageSize,
        };

        // Th√™m ƒëi·ªÅu ki·ªán l·ªçc n·∫øu c√≥
        if (this.state.filterValue) {
            params[this.state.filterField] = this.state.filterValue;
        }

        const result = await rpc("/test/list", params);
        this.state.items = result.results;
        this.state.total = result.total;
        this.state.selectedIds.clear(); // Reset selection
    }


    setFilterField(field) {
        this.state.filterField = field;
    }

    async applyFilters() {
        this.state.page = 1; // Reset v·ªÅ trang 1 khi filter
        await this.loadItems();
    }

    // üëâ Chuy·ªÉn trang
    async goToPage(page) {
        this.state.page = page;
        await this.loadItems();
    }
        
    // M·ªói l·∫ßn m√† c√≥ file th√¨ d√πng h√†m n√†y nh√© 
    // Kh√¥ng c·∫ßn quan t√¢m h√†m n√†y l√†m g√¨ ch·ªâ c·∫ßn bi·∫øt l√† 
    // n√≥ x·ª≠ l√Ω th√™m file ng∆∞·ªùi d√πng ch·ªçn b√™n giao di·ªán
    // v√†o this.state.newImage l√† ƒë∆∞·ª£c
    handleImageChange(ev, isEdit = false) {
        const file = ev.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = () => {
            const base64 = reader.result.split(",")[1];
            if (isEdit) {
                this.state.editImage = base64;
            } else {
                this.state.newImage = base64;
            }
        };
        reader.readAsDataURL(file);
    }
    openCreateModal() {
        this.state.isCreateModal = true;
    }

    closeCreateModal() {
        this.state.isCreateModal = false;
        this.state.newName = "";
        this.state.newTitle = "";
        this.state.newImage = "";
    }

    // H√†m n√†y c·∫ßn s·ª≠a n·∫øu m√† th√™m tr∆∞·ªùng m·ªõi trong module
    // H√†m n√†y d√πng ƒë·ªÉ g·ªçi m·∫•y c√°i h√†m b√™n controller m√¨nh vi·∫øt √°
    /* N·∫øu ƒë·ªÉ √Ω th√¨ c√≥ th·∫•y "/test/create" ƒë√¢y ch√≠nh l√†
        C√°ch m√† file n√†y g·ªçi h√†m b√™n controller 
        C√≥ th·ªÉ v·ªÅ file controller t√¨m h√†m test_create b√™n tr√™n c√≥
        @http.route('/test/create' tr√πng v·ªõi c√°i g·ªçi b√™n d∆∞·ªõi
    */
    async addTest() {
        // Ki·ªÉm tra xem n·∫øu m√† user kh√¥ng nh·∫≠p t√™n th√¨ th√¥ng b√°o
>>>>>>> a7a2e8c (feature: save state)
        if (!this.state.newName.trim()) {
            alert("Vui l√≤ng nh·∫≠p t√™n!");
            return;
        }
<<<<<<< HEAD
=======
        // Ki·ªÉm tra xem n·∫øu m√† user kh√¥ng title th√¨ th√¥ng b√°o l·ªói
>>>>>>> a7a2e8c (feature: save state)
        if (!this.state.newTitle.trim()) {
            alert("Vui l√≤ng nh·∫≠p m√¥ t·∫£!");
            return;
        }
<<<<<<< HEAD
        const newItem = await rpc("/test/create", { 
            name: this.state.newName, 
            title: this.state.newTitle
        });
        // Th√™m c√°i item v√†o list
        this.state.items.push(newItem);
        // Reset l·∫°i tr·∫°ng th√°i c≈©
        this.state.newName = "";
        this.state.newTitle = "";
=======

        // C√°i n√†y s·∫Ω ch·ª©a c√°i d·ªØ li·ªáu m√† user nh·∫≠p v√†o
        const values = {
            name: this.state.newName,
            title: this.state.newTitle,
        };
        
        // N·∫øu nh∆∞ m√† ƒë·ªëi t∆∞·ª£ng ƒë√≥ c√≥ th√™m image th√¨ m√¨nh s·∫Ω
        // b·ªè c√°i image ƒë√≥ v√†o values ƒë√∫ng kh√¥ng ?
        if (this.state.newImage) {
            // ƒê√¢y l√† c√∫ ph√°p b·ªè m·ªôt tr∆∞·ªùng n√†o ƒë√≥ v√†o
            // values.{t√™n tr∆∞·ªùng} = gi√° tr·ªã b·ªè v√†o
            values.image = this.state.newImage;
        }
        
        // Gi·ªù th√¨ m√¨nh b·ªè values v√†o h√†m ƒë·ªÉ t·∫°o th√¥i
        // B·∫°n c√≥ th·∫•y n√≥ gi·ªëng v·ªõi x·ª≠ l√Ω b√™n controller ch·ª©
        const newItem = await rpc("/test/create", values);
        // Reset l·∫°i tr·∫°ng th√°i c≈©
        // C√°i n√†y n·∫øu c√≥ tr∆∞·ªùng m·ªõi th√¨ th√™m v√†o th√¥i ƒë∆°n gi·∫£n m√† ƒë√∫ng kh√¥ng ?
        // Reset v√† ƒë√≥ng modal
        this.closeCreateModal();
        // ‚úÖ G·ªçi l·∫°i API ƒë·ªÉ load l·∫°i danh s√°ch
        await this.loadItems();
>>>>>>> a7a2e8c (feature: save state)
    }
    
    toggleSelection(id) {
        if (this.state.selectedIds.has(id)) {
            this.state.selectedIds.delete(id);
        } else {
            this.state.selectedIds.add(id);
        }
    }

    async deleteSelected() {
        if (this.state.selectedIds.size === 0) return;

        const ids = Array.from(this.state.selectedIds);
        await rpc("/test/delete_bulk", { ids }); // Ch∆∞a t·∫°o controller n√†y

<<<<<<< HEAD
        this.state.items = this.state.items.filter(item => !this.state.selectedIds.has(item.id));
        this.state.selectedIds.clear();
    }

    async viewDetail(id) {
        const detail = await rpc("/test/detail", { id });
        alert(`T√™n: ${detail.name}\nM√¥ t·∫£: ${detail.title}\nT·∫°o l√∫c: ${detail.create_date}`);
    }

    async editTest(item) {
        const newName = prompt("Nh·∫≠p t√™n m·ªõi:", item.name);
        const newTitle = prompt("Nh·∫≠p m√¥ t·∫£ m·ªõi:", item.title || "");
        // Kh√¥ng update n·∫øu kh√¥ng c√≥ thay ƒë·ªïi
        if (
            (!newName || newName === item.name) 
            &&
            (!newTitle || newTitle === item.title)) 
            {
            return;
        }

        const result = await rpc("/test/update", {
            id: item.id,
            ...(newName && newName !== item.name ? { name: newName } : {}),
            ...(newTitle && newTitle !== item.title ? { title: newTitle } : {}),
        });

        if (result?.status === "success") {
            if (newName && newName !== item.name) item.name = newName;
            if (newTitle && newTitle !== item.title) item.title = newTitle;
        } else {
            alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i: " + (result?.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh"));
        }
=======
        this.state.selectedIds.clear();
        // ‚úÖ G·ªçi l·∫°i load
        await this.loadItems();
    }

    async viewDetail(id) {
        try {
                const detail = await rpc("/test/detail", { id });
                this.state.detailItem = detail;
                this.state.showModal = true;
            } catch (e) {
                console.error("L·ªói khi l·∫•y chi ti·∫øt:", e);
            }
    }

    openEditModal(id) {
        const item = this.state.items.find((item) => item.id === id);
        if (!item) {
            alert("Kh√¥ng t√¨m th·∫•y m·ª•c ƒë·ªÉ s·ª≠a");
            return;
        }

        this.state.editName = item.name;
        this.state.editTitle = item.title;
        this.state.editImage = item.image || "";
        this.state.editId = item.id;
        this.state.isEditModal = true;
    }

    async updateEditItem() {
        if (!this.state.editId) {
            alert("Kh√¥ng c√≥ ID ƒë·ªÉ c·∫≠p nh·∫≠t");
            return;
        }

        if (!this.state.editName.trim()) {
            alert("Vui l√≤ng nh·∫≠p t√™n!");
            return;
        }

        if (!this.state.editTitle.trim()) {
            alert("Vui l√≤ng nh·∫≠p m√¥ t·∫£!");
            return;
        }

        const values = {
            id: this.state.editId,
            name: this.state.editName,
            title: this.state.editTitle,
        };

        if (this.state.editImage) {
            values.image = this.state.editImage;
        }

        const updated = await rpc("/test/update", values);

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch items
        const index = this.state.items.findIndex((item) => item.id === updated.id);
        if (index !== -1) {
            this.state.items[index] = updated;
        }

        // ƒê√≥ng modal v√† reset
        this.state.isEditModal = false;
        this.state.editId = null;
        this.state.editName = "";
        this.state.editTitle = "";
        this.state.editImage = "";
        this.state.editFile = null;
>>>>>>> a7a2e8c (feature: save state)
    }

    static template = "test.TestModelTemplate";
}

registry.category("actions").add("test.test_list", TestModelTemplate);
